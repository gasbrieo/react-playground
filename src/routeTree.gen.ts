/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as PublicRouteImport } from './routes/_public';
import { Route as PrivateRouteImport } from './routes/_private';
import { Route as PrivateIndexRouteImport } from './routes/_private/index';
import { Route as PrivateTablesPlansRouteImport } from './routes/_private/plans';

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any);
const PrivateRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any);
const PrivateIndexRoute = PrivateIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateTablesPlansRoute = PrivateTablesPlansRouteImport.update({
  id: '/tables/plans',
  path: '/tables/plans',
  getParentRoute: () => PrivateRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof PrivateIndexRoute;
  '/tables/plans': typeof PrivateTablesPlansRoute;
}
export interface FileRoutesByTo {
  '/': typeof PrivateIndexRoute;
  '/tables/plans': typeof PrivateTablesPlansRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_private': typeof PrivateRouteWithChildren;
  '/_public': typeof PublicRoute;
  '/_private/': typeof PrivateIndexRoute;
  '/_private/tables/plans': typeof PrivateTablesPlansRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/tables/plans';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/tables/plans';
  id: '__root__' | '/_private' | '/_public' | '/_private/' | '/_private/tables/plans';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren;
  PublicRoute: typeof PublicRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof PublicRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_private': {
      id: '/_private';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof PrivateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_private/': {
      id: '/_private/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof PrivateIndexRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    '/_private/tables/plans': {
      id: '/_private/tables/plans';
      path: '/tables/plans';
      fullPath: '/tables/plans';
      preLoaderRoute: typeof PrivateTablesPlansRouteImport;
      parentRoute: typeof PrivateRoute;
    };
  }
}

interface PrivateRouteChildren {
  PrivateIndexRoute: typeof PrivateIndexRoute;
  PrivateTablesPlansRoute: typeof PrivateTablesPlansRoute;
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateIndexRoute: PrivateIndexRoute,
  PrivateTablesPlansRoute: PrivateTablesPlansRoute,
};

const PrivateRouteWithChildren = PrivateRoute._addFileChildren(PrivateRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRoute,
};
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();
